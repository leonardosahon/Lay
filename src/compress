#!/usr/bin/php
<?php
require_once "libs/CopyDirectory.php";
use Lay\libs\CopyDirectory;

$intro = function() {
    print "----------------------------------------------------------\n";
    print "-- Name:     \t  OsaiMinifier                             \n";
    print "-- Version:  \t  1.5                                      \n";
    print "-- Author:   \t  Osahenrumwen Aigbogun                    \n";
    print "-- Created:  \t  21/10/2021;                              \n";
    print "-- Dependencies:\n \tTerser (JS);\n \tclean-css (CSS)     \n";
    print "----------------------------------------------------------\n";

    // check dependencies
    $npm = shell_exec("npm -v 2>&1");
    $js = shell_exec("terser --version 2>&1");
    $css = shell_exec("cleancss --version 2>&1");

    if(!$npm || !$js || !$css) {
        print "Some of the dependencies have not been installed, please install all of them to continue with this script.\n 
        Dependencies that exist: 
        \n[npm: $npm]
        \n[terser: $js]
        \n[cleancss(clean-css): $css]
        \n";
        die;
    }
};

$args = $argv;
$script_name = "compress";

if(in_array(("--help"),$args,true) || in_array(("-h"),$args,true)){
    $intro();
    print ">>> This is a batch minifier for JS/CSS, that takes a directory as an input and provides the respected output in the\n";
    print ">>> directory indicated using the -o flag. This helps save production time\n";
    print "----------------------------------------------------------\n";
    print "### Usage: [$script_name] {directory_name} [--output || -o] {output_directory}\n";
    print "### Example: php $script_name dir/js -o prod-dir/js\n";
    die;
}

if($argc == 1){
    $intro();
    die;
}

$raw_dir = $args[1];

$out = array_search("--output",$args);
if($arg = !$out ? array_search("-o",$args) : $out)
    $bundle_dir = $args[($arg + 1)];

 $ignore = array_search("--ignore",$args);
 if($arg = !$ignore ? array_search("-i",$args) : $ignore)
     $ign = explode(",",$args[($arg + 1)] ?? "");

if(!isset($bundle_dir)) {
    print "No output directory was specified, process aborted! use --help for more info\n";
    die;
}

minify_dir($raw_dir,$bundle_dir);

function minify_dir(string $parent_dir, string $output_dir, array &$error = []): void
{
    if(!is_dir($parent_dir)){
        print "Argument[0] is not a directory; Argument[0] & Argument[1] should be directories\n";
        die;
    }

    global $ign;

    $ignore = $ign ?? [];
    $core_ignore = ["node_modules"];

    $last_file = 'No Change Was Made';
    $log_file = __DIR__ . DIRECTORY_SEPARATOR . ".compress.log";
    $track_changes = [];
    $changes = 0;
    $duration = time();

    if(file_exists($log_file))
        $track_changes = json_decode(file_get_contents($log_file),true);

    $is_css = fn($file) => strtolower(substr(trim($file),-4)) === ".css";
    $is_js = fn($file) => strtolower(substr(trim($file),-3)) === ".js";
    $encrypt = function (string $text, string $key) : string {
        return openssl_encrypt($text, "AES-256-CTR", $key,0,"h5d4367637673773");
    };

    $GLOBALS['intro']();
    print "### Production Begins [RES]\n";

    new CopyDirectory(
        $parent_dir, $output_dir,
        fn($file) => in_array($file,$core_ignore,true) || in_array($file,$ignore,true) || (function_exists('fnmatch') && fnmatch('.*',$file)),
        function($file, $src) use ($is_css,$is_js, $encrypt, &$track_changes){
            try{
                $file_location = $encrypt($src . DIRECTORY_SEPARATOR . $file, "KEY-FILE");
                $last_modified = filemtime($src . DIRECTORY_SEPARATOR . $file);

                if(@$track_changes[$file_location] === $last_modified)
                    return "continue";

                $track_changes[$file_location] = $last_modified;

            }catch (\Exception $e){}

            if ($is_css($file) || $is_js($file))
                return "skip-copy";

            return $file;
        },
        function ($file,$parent_dir,$output_dir) use ($is_css,$is_js,&$last_file,&$error,&$changes) {
            $output = $output_dir . "/" . $file;
            $file = $parent_dir . "/" . $file;
            $return = null;

            $current_error = [];
            $last_file = $file;
            print "\033[2K\r=== Current File: $file";

            if($is_js($file))
                $return = exec("terser $file -c -m -o $output 2>&1",$current_error);

            if ($is_css($file))
                $return = exec("cleancss -s -o $output $file 2>&1", $current_error);

            if(count($current_error) > 0)
                $error[] = ["file" => $file, "error" => join("\n", $current_error)];

            $changes++;

            if($return)
                return "copy";

            return $file;
        }
    );

    if(file_exists($log_file))
        unlink($log_file);

    $fh = fopen($log_file,"w");
    fwrite($fh, json_encode($track_changes));
    fclose($fh);

    $duration = gmdate("s",time() - $duration) . "sec";
    $changes = number_format($changes);
    $error_count = count($error);
    print "\033[2K\r=== Last File: $last_file";
    print "\n### Production ENDS ===\n";
    print "### Errors: $error_count\n";
    print "### Total Changes: $changes\n";
    print "### Duration: $duration\n";
    if($error_count > 0) print_r($error);
}
