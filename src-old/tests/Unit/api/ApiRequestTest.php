<?php

namespace Lay\tests\Unit\api;

use Lay\core\api\ApiEngine;
use Lay\tests\Unit\FakeController;
use PHPUnit\Framework\TestCase;

class ApiRequestTest extends TestCase {
    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $_SERVER['REQUEST_METHOD'] = "GET";
        ApiEngine::use_php_exception();
    }
//
//    /**
//     * @test
//     */
//    public function fetch_has_error() : void {
//        $this->expectException("LayExp_InvalidAPIRequest");
//        LayRequestHandler::use_php_exception()::fetch();
//    }
//
//    /**
//     * @test
//     */
//    public function no_request_executed() : void {
//        $this->expectException('LayExp_NoRequestExecuted');
//
//        $_GET['bob_api_req'] = "users/list";
//        LayRequestHandler::use_php_exception()::fetch()::end();
//    }
//
//    /**
//     * @test
//     */
//    public function no_request_method_header() : void {
//        $_GET['bob_api_req'] = "users/list";
//
//        $req = LayRequestHandler::use_php_exception()::fetch();
//        $ctrl = new FakeController();
//
//        $this->expectException('LayExp_RequestMethodNotFound');
//
//        unset($_SERVER['REQUEST_METHOD']);
//        $req->get('users/list')->bind(fn() => $ctrl->nonexistent_method());
//
//        $_SERVER['REQUEST_METHOD'] = "GET";
//    }
//
//    /**
//     * @test
//     */
//    public function request_method_basic() : void {
//        $_GET['bob_api_req'] = "users/profile/36373";
//
//        $req = LayRequestHandler::fetch();
//
//        $req->get('users/profile/{1}');
//
//        $expected = [36373];
//
//        $this->assertEquals($expected, $req->get_mapped_args());
//    }
//
//    /**
//     * @test
//     */
//    public function request_method_complex() : void {
//        $_GET['bob_api_req'] = "users/profile/36373/foo-bar-baz/3.01";
//
//        $req = LayRequestHandler::fetch();
//
//        $req->get('users/profile/{@int id}/{@string uid}/{@float balance}');
//
//        $expected = [36373, 'foo-bar-baz', 3.01];
//
//        $this->assertEquals($expected, $req->get_mapped_args());
//    }
//
//    /**
//     * @test
//     */
//    public function request_method_chains() : void {
//        $_GET['bob_api_req'] = "users/list/all";
//
//        $req = LayRequestHandler::use_php_exception()::fetch();
//        $ctrl = new FakeController();
//
//        $req
//            ->get('users/profile')->bind(fn($id, $bal) => $ctrl->test_wrong_type($id,$bal))
//            ->get('users/list/all')->bind(fn() => $ctrl->print_all())
//            ->get('user/profile/{@int 1}/{@float 2}')->bind(fn($id, $bal) => $ctrl->print_user($id,$bal));
//
//        $expected = [
//            ["name" => "User 1"],
//            ["name" => "User 2"],
//            ["name" => "User 3"],
//        ];
//
//        $this->assertEquals($expected, $req->get_result());
//    }
//
//    /**
//     * @test
//     */
//    public function set_prefix_get_request() : void {
//        $_GET['bob_api_req'] = "client/users/profile/all";
//
//        $req = LayRequestHandler::fetch();
//        $ctrl = new FakeController();
//
//        $_SERVER['REQUEST_METHOD'] = "GET";
//
//        $req->prefix("client")
//            ->post('users/{d}')->bind(fn() => $ctrl->void_method())
//            ->get('users/profile/all')->bind(fn() => $ctrl->print_all())
//            ->post('users/orders')->bind(fn() => $ctrl->void_method());
//
//        $expected = [
//            ["name" => "User 1"],
//            ["name" => "User 2"],
//            ["name" => "User 3"],
//        ];
//
//        $this->assertEquals($expected, $req->get_result());
//    }

    /**
     * @test
     */
    public function request_with_same_routes() : void {
        $_GET['bob_api_req'] = "users/list/all";

        $req = ApiEngine::use_php_exception()::fetch();
        $ctrl = new FakeController();

        $_SERVER['REQUEST_METHOD'] = 'POST';

        $req
            ->get('users/list/all')->bind(fn() => $ctrl->print_all())
            ->post('users/list/all')->bind(fn() => $ctrl->print_something())
            ->put('users/list/all')->bind(fn($id, $bal) => $ctrl->print_user($id,$bal));

        $expected = "This is a stringed result";

        $this->assertEquals($expected, $req->get_result());
    }

    /**
     * @test
     */
    public function request_with_similar_routes() : void {
        $_GET['bob_api_req'] = "admin/cart/orders";

        $req = ApiEngine::fetch();
        $ctrl = new FakeController();

        $_SERVER['REQUEST_METHOD'] = "POST";

        $req->group("admin", function(ApiEngine $req) use ($ctrl) {
            $req->post('{d}/{b}')->bind(fn($a, $b) => $ctrl->print_user($a, $b))
                ->get('profile/all')->bind(fn() => $ctrl->print_all())
                ->post('cart/orders')->bind(fn() => $ctrl->void_method());
        });

        $this->assertEquals(null, $req->get_result());
    }


    /**
     * @test
     */
    public function set_group_with_name() : void {
        $_GET['bob_api_req'] = "admin/users/1";

        $req = ApiEngine::fetch();
        $ctrl = new FakeController();

        $_SERVER['REQUEST_METHOD'] = "POST";

        $req->prefix("admin")
            ->group("users", function(ApiEngine $req) use ($ctrl) {
                $req->post('{@int id}')->bind(fn($id) => $ctrl->print_user($id, 23))
                    ->get('profile/all')->bind(fn() => $ctrl->print_all())
                    ->post('users/orders')->bind(fn() => $ctrl->void_method());
            });

        $expected = [
            "name" => "User name",
            "id" => 1,
            "balance" => 23.0
        ];

        $this->assertEquals($expected, $req->get_result());
    }

    /**
     * @test
     */
    public function set_group_without_name() : void {
        $_GET['bob_api_req'] = "admin/cart/orders";

        $req = ApiEngine::fetch();
        $ctrl = new FakeController();

        $_SERVER['REQUEST_METHOD'] = "POST";

        $req->prefix("admin")
            ->groups(function(ApiEngine $req) use ($ctrl) {
                $req->post('{d}/{b}')->bind(fn($a, $b) => $ctrl->print_user($a, $b))
                    ->get('profile/all')->bind(fn() => $ctrl->print_all())
                    ->post('cart/orders')->bind(fn() => $ctrl->void_method());
            });

        $this->assertEquals(null, $req->get_result());
    }

    /**
     * @test
     */
    public function bound_not_found() : void {
        $_GET['bob_api_req'] = "users/list";

        $req = ApiEngine::use_php_exception()::fetch();
        $ctrl = new FakeController();

        $this->expectException('LayExp_ErrorEncountered');

        $req->get('users/list')->bind(fn() => $ctrl->nonexistent_method());
    }

    /**
     * @test
     */
    public function bound_has_arg_type_error() : void {
        $_GET['bob_api_req'] = "users/profile/36373/3.d012";

        $req = ApiEngine::use_php_exception()::fetch();
        $ctrl = new FakeController();

        $this->expectException('LayExp_MethodTypeError');

        $req->get('users/profile/{@int 1}/{@string 2}')
            ->bind(fn(int $id, string $bal) => $ctrl->test_wrong_type($id, $bal));
    }

    /**
     * @test
     */
    public function bound_returns_wrong_type() : void {
        $_GET['bob_api_req'] = "users/list/";

        $req = ApiEngine::use_php_exception()::fetch();
        $ctrl = new FakeController();

        $this->expectException('LayExp_MethodTypeError');

        $req->get('users/list')->bind(fn() => $ctrl->print_user_wrong_type());
    }

    /**
     * @test
     */
    public function bound_can_run_with_args() : void {
        $_GET['bob_api_req'] = "users/profile/36373/3.01";

        $req = ApiEngine::fetch();
        $ctrl = new FakeController();

        $req->get('users/profile/{@int 1}/{@float 3}')->bind(fn($id, $bal) => $ctrl->print_user($id, $bal));

        $expected = [
            "name" => "User name",
            "id" => 36373,
            "balance" => 3.01,
        ];

        $this->assertEquals($expected, $req->get_result());
    }

    /**
     * @test
     */
    public function bound_can_run_without_args() : void {
        $_GET['bob_api_req'] = "users/profile/";

        $req = ApiEngine::fetch();
        $ctrl = new FakeController();

        $req->get('users/profile')->bind(fn() => $ctrl->print_all());

        $expected = [
            ["name" => "User 1"],
            ["name" => "User 2"],
            ["name" => "User 3"],
        ];

        $this->assertEquals($expected, $req->get_result());
    }

    /**
     * @test
     */
    public function bound_can_run_void_returns() : void {
        $_GET['bob_api_req'] = "users/profile/";

        $req = ApiEngine::fetch();
        $ctrl = new FakeController();

        $req->get('users/profile')->bind(fn() => $ctrl->void_method());

        $this->assertEquals(null, $req->get_result());
    }
}
