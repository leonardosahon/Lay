#!/usr/bin/php
<?php
require_once "libs/CopyDirectory.php";
use Lay\libs\CopyDirectory;

$intro = function() {
    print "----------------------------------------------------------\n";
    print "-- Name:     \t  OsaiMinifier                             \n";
    print "-- Version:  \t  1.5                                      \n";
    print "-- Author:   \t  Osahenrumwen Aigbogun                    \n";
    print "-- Created:  \t  21/10/2021;                              \n";
    print "-- Dependencies:\n \tTerser (JS);\n \tclean-css-cli (CSS) \n";
    print "----------------------------------------------------------\n";

    // check dependencies
    $npm = exec("npm -v");
    $js = exec("terser --version");
    $css = exec("cleancss --version");

    if(!$npm || !$js || !$css) {
        print "Some of the dependencies have not been installed, please install all of them to continue with this script\n";
        die;
    }
};

$args = $argv;
$script_name = "compress";

if(in_array(("--help"),$args,true) || in_array(("-h"),$args,true)){
    $intro();
    print ">>> This is a batch minifier for JS/CSS, that takes a directory as an input and provides the respected output in the\n";
    print ">>> directory indicated using the -o flag. This helps save production time\n";
    print "----------------------------------------------------------\n";
    print "### Usage: [$script_name] {directory_name} [--output || -o] {output_directory}\n";
    print "### Example: php $script_name dir/js -o prod-dir/js\n";
    die;
}

if($argc == 1){
    $intro();
    die;
}

$raw_dir = $args[1];

$out = array_search("--output",$args);
if($arg = !$out ? array_search("-o",$args) : $out)
    $bundle_dir = $args[($arg + 1)];

 $ignore = array_search("--ignore",$args);
 if($arg = !$ignore ? array_search("-i",$args) : $ignore)
     $ign = explode(",",$args[($arg + 1)]);

if(!isset($bundle_dir)) {
    print "No output directory was specified, process aborted! use --help for more info\n";
    die;
}

minify_dir($raw_dir,$bundle_dir);

function minify_dir(string $parent_dir, string $output_dir, array &$error = []) {
    if(!is_dir($parent_dir)){
        print "Argument[0] is not a directory; Argument[0] & Argument[1] should be directories\n";
        die;
    }

    global $ign;

    $ignore = $ign ?? [];
    $core_ignore = ["node_modules"];

    $last_file = 'No File Processed';
    $is_css = fn($file) => strtolower(substr(trim($file),-4)) === ".css";
    $is_js = fn($file) => strtolower(substr(trim($file),-3)) === ".js";

    $GLOBALS['intro']();
    print "### Production Begins [RES]\n";

    new CopyDirectory(
        $parent_dir, $output_dir,
        fn($file) => in_array($file,$core_ignore,true) || in_array($file,$ignore,true) || (function_exists('fnmatch') && fnmatch('.*',$file)),
        function($file) use ($is_css,$is_js){
            if ($is_css($file) || $is_js($file))
                return "skip-copy";

            return $file;
        },
        function ($file,$parent_dir,$output_dir) use ($is_css,$is_js,&$last_file,&$error) {
            $output = $output_dir . "/" . $file;
            $file = $parent_dir . "/" . $file;
            $return = null;

            $current_error = [];
            $last_file = $file;
            print "\033[2K\r=== Current File: $file";

            if($is_js($file))
                $return = exec("terser $file -c -m -o $output 2>&1",$current_error);

            if ($is_css($file))
                $return = exec("cleancss -o $output $file 2>&1", $current_error);

            if(count($current_error) > 0)
                $error[] = ["file" => $file, "error" => join("\n", $current_error)];

            if($return)
                return "copy";

            return $file;
        },
    );

    $error_count = count($error);
    print "\033[2K\r=== Last File: $last_file";
    print "\n### Production ENDS ===\n";
    print "### Errors: $error_count\n";
    if($error_count > 0) print_r($error);
}